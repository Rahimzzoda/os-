▎1) Что такое ООП? – полное определение

Объектно-ориентированное программирование (ООП) — это парадигма программирования, основанная на концепции "объектов", которые могут содержать данные в виде полей (атрибутов или свойств) и код в виде процедур (методов). Основные принципы ООП включают инкапсуляцию, наследование и полиморфизм. 

• Инкапсуляция подразумевает скрытие внутреннего состояния объекта и предоставление интерфейса для взаимодействия с ним.

• Наследование позволяет создавать новые классы на основе существующих, что способствует повторному использованию кода.

• Полиморфизм дает возможность использовать одно и то же имя метода для разных объектов, что упрощает взаимодействие с различными классами.

▎2) Магическое число 7 Миллера? – привести не менее 7 примеров из IT

Магическое число 7, предложенное психологом Джорджем Миллером, указывает на то, что человек способен удерживать в памяти одновременно около 7 единиц информации. Примеры из IT:

1. Количество элементов в меню: Оптимальное количество пунктов меню в интерфейсах часто составляет от 5 до 9.

2. Пароли: Рекомендуется использовать пароли длиной не менее 8-12 символов, чтобы их было легче запомнить.

3. Группировка данных: В таблицах и базах данных часто используют группировку по 7-8 записей для удобства восприятия.

4. Цветовая палитра: В веб-дизайне часто используют ограниченное количество цветов (обычно 5-7), чтобы не перегружать восприятие.

5. Блоки текста: Рекомендуется разбивать текст на абзацы по 7 строк для лучшей читаемости.

6. Кнопки навигации: В мобильных приложениях обычно не более 5-7 кнопок навигации для удобства пользователя.

7. Списки задач: Эффективные списки задач часто содержат не более 7 пунктов, чтобы избежать перегрузки.

▎3) Энтропия ПО? – привести не менее 5 примеров нег энтропийных мер при разработке ПО

Энтропия программного обеспечения относится к уровню неопределенности или хаоса в коде и архитектуре системы. Негэнтропийные меры помогают уменьшить эту неопределенность:

1. Стандартизация кода: Использование общепринятых стилей кодирования (например, PEP8 для Python) помогает сделать код более предсказуемым и понятным.

2. Документация: Подробная документация кода и API уменьшает неопределенность для разработчиков, работающих с системой.

3. Автоматизированное тестирование: Наличие юнит-тестов и интеграционных тестов позволяет гарантировать, что изменения в коде не приведут к неожиданным ошибкам.

4. Модульность: Разделение программы на небольшие, независимые модули помогает упростить понимание и поддержку кода.

5. Использование паттернов проектирования: Применение известных паттернов (например, MVC, Singleton) делает архитектуру системы более предсказуемой.

▎4) 5 признаков сложной системы по Гради Бучу

1. Множество взаимосвязей:

   • Пример 1: Веб-приложение, состоящее из множества микросервисов, где изменения в одном сервисе могут повлиять на другие.

   • Пример 2: Система управления проектами, где задачи связаны между собой зависимостями.

2. Неопределенность поведения:

   • Пример 1: Алгоритмы машинного обучения, результаты которых могут варьироваться в зависимости от входных данных.

   • Пример 2: Система рекомендаций, где поведение может изменяться в зависимости от предпочтений пользователей.

3. Адаптация к изменениям:

   • Пример 1: Игра с открытым миром, где игровые элементы могут изменяться в зависимости от действий игрока.

   • Пример 2: Система, использующая API сторонних сервисов, которые могут изменять свою функциональность.

4. Эмерджентные свойства:

   • Пример 1: Социальная сеть, где взаимодействия пользователей приводят к формированию трендов и сообществ.

   • Пример 2: Игровая экосистема, где поведение игроков создает новые игровые механики.

5. Динамическое поведение:

   • Пример 1: Финансовая система, реагирующая на изменения рыночных условий в реальном времени.
   • Пример 2: Интернет вещей (IoT), где устройства могут изменять свое поведение в зависимости от окружающей среды.

▎5) Закон иерархических компенсаций Седова

Закон иерархических компенсаций предполагает, что в сложных системах изменения в одной части системы могут быть компенсированы изменениями в другой части. Примеры из эволюции IT-сферы:

1. Переход от монолитных приложений к микросервисам: Упрощение архитектуры путем разделения на независимые сервисы позволяет легче управлять изменениями и масштабированием.

2. Использование облачных технологий: Переход на облачные платформы позволяет компенсировать недостаток локальных ресурсов за счет масштабируемости облачных решений.

3. Адаптация Agile-методологий: Внедрение Agile позволяет командам быстро адаптироваться к изменениям требований и условий проекта.

4. Интеграция DevOps практик: Совмещение разработки и операций позволяет быстрее реагировать на изменения и улучшать качество программного обеспечения.

5. Использование контейнеризации (Docker): Контейнеризация приложений позволяет легко переносить их между различными средами, компенсируя проблемы совместимости.
